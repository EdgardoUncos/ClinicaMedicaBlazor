@page "/pacientes"
@using ClinicaMedica.Shared.DTOs.Basic
@inject HttpClient Http

<PageTitle>Pacientes</PageTitle>

<div class="container mb-3">
    <h4>Lista de Pacientes</h4>
</div>

<div class="container mb-3">
    <a class="btn btn-outline-primary" href="/crearpaciente">Crear nuevo paciente</a>
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @ErrorMessage
    </div>
}

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div class="form-inline">
                <input type="text" class="form-control mb-2 mr-sm-2"
                       @bind="filtro" placeholder="Filtrar por Nombre" />
                <button type="button" class="btn btn-primary mr-sm-2 mb-2"
                        @onclick="Search">
                    Filtrar
                </button>
                <button type="button" class="btn btn-danger mb-2"
                        @onclick="Limpiar">
                    Limpiar
                </button>

            </div>
        </div>

    </div>
</div>


<div class="container">
    <table class="table">
        <thead>
            <tr>
                <td>Nombre</td>
                <td>Apellido</td>
                <td>Obra Social</td>
                <td>Acciones</td>
            </tr>
        </thead>
        <tbody>
            @if (ListaPaciente != null && ListaPaciente.Any())
            {
                @foreach (var paciente in ListaFiltrada)
                {
                    <tr>
                        <td>@paciente.Persona.Nombre</td>
                        <td>@paciente.Persona.Apellido</td>
                        <td>@paciente.ObraSocial</td>
                        <td>
                            <a class="btn btn-primary" href="OrdenMedica/@paciente.PacienteId">Orden Medica</a>
                            <button class="btn btn-success"><i class="bi bi-pen-fill"></i></button>
                            <button class="btn btn-danger"><i class="bi bi-trash3-fill"></i></button>
                        </td>
                    </tr>
                }
            }
            else if (string.IsNullOrEmpty(ErrorMessage))
            {
                <tr>
                    <td colspan="4" class="text-center">No hay pacientes disponibles.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    List<PacientesDTO> ListaPaciente = new List<PacientesDTO>();
    List<PacientesDTO> ListaFiltrada = new List<PacientesDTO>();
    string ErrorMessage = "";
    private string filtro = "";

    private string Filtro
    {
        get => filtro;
        set
        {
            filtro = value;
            Search();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("api/Pacientes");

            if (response.IsSuccessStatusCode)
            {
                var leoDes = await response.Content.ReadFromJsonAsync<List<PacientesDTO>>();
                ListaPaciente = leoDes;
                ListaFiltrada = ListaPaciente;
            }
            else
            {
                ErrorMessage = $"Error al obtener los pacientes. Código: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "No se pudo conectar con el servidor. Verifique su conexión.";
            Console.WriteLine(ex.Message);
        }
    }

    private void Search()
    {
        if (filtro.Length > 2)
        {
            ListaFiltrada = ListaPaciente
                .Where(x => x.Persona.Nombre.ToUpper().Contains(filtro.ToUpper()))
                .ToList();
        }
        else
        {
            ListaFiltrada = ListaPaciente;
        }
        //StateHasChanged(); // Forzar la actualización de la UI
    }

    private void Limpiar()
    {
        filtro = "";
        ListaFiltrada = ListaPaciente;
    }
}
